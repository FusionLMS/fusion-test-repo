name: .NET Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 22 * * *'

jobs:
  pre-check:
    runs-on: ubuntu-latest

    env:
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙ Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: ♻ NuGet Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}.nuget.${{ hashFiles('**/*.csproj') }}

      - name: 🔄 Restore Nuget Packages
        shell: bash
        run: dotnet restore ./FusionPlayground/FusionPlayground.sln

      - name: 🛠 Build Solution
        shell: bash
        run: dotnet build ./FusionPlayground/FusionPlayground.sln

      - name: ✅ Run Unit Tests
        shell: bash
        run: dotnet test ./FusionPlayground/FusionPlayground.sln
        
  build-and-push:
    permissions:
      actions: write
      contents: write
      deployments: write
      packages: write
      pull-requests: write
      statuses: write
    runs-on: ubuntu-latest
    needs: pre-check
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for fetching all tags and branches
      - name: Fetch tags from json
        run: |
          # Fetch tags from GHCR
          TAGS_JSON=$(curl -H "Authorization: Bearer $GHCR_TOKEN" "$GHCR_API_URL/user/packages/container/$REPO_NAME/versions")
          echo "$TAGS_JSON" # Add this line to debug the output
          # Proceed with the rest of your script

      - name: Determine Next Version
        id: versioning
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          REPO_NAME: fusionlms/fusion-test-repo/fusion-test
          GHCR_API_URL: https://api.github.com
        run: |
          # Fetch tags from GHCR
          TAGS_JSON=$(curl -H "Authorization: Bearer $GHCR_TOKEN" "$GHCR_API_URL/user/packages/container/$REPO_NAME/versions")
          # Extract tags, assuming tags are in the format of "vX.Y.Z"
          LATEST_TAG=$(echo $TAGS_JSON | jq -r '[.[] | .name] | .[]' | sort -V | tail -n1)
          echo "Latest tag: $LATEST_TAG"
          # Increment the patch version
          NEW_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
          echo "New version: $NEW_TAG"
          # Set the new version for later steps
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build ./FusionPlayground/ConsoleApp1 --tag fusion-test-image

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag Docker image with new version
        run: docker tag fusion-test-image ghcr.io/fusionlms/fusion-test-repo/fusion-test:${{ env.NEW_TAG }}
        
      - name: Push to GitHub Package Registry
        run: docker push ghcr.io/fusionlms/fusion-test-repo/fusion-test:${{ env.NEW_TAG }}

      - name: Tag New Version in Git
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config --global credential.helper store
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
      
#      - name: Trigger Continuous Delivery Workflow
#        if: success()
#        uses: peter-evans/repository-dispatch@v3
#        with:
#          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#          repository: FusionLMS/fusion-test-repo
#          event-type: continuous-delivery-trigger
# 
  
  sonarcloud_analysis:
    runs-on: ubuntu-latest
    needs: pre-check
    env:
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🚀 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 📦 Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 🗃️ Cache SonarCloud Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: 🔧 Install SonarCloud Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

      - name: 🔧 Install JetBrains dotCover
        run: dotnet tool install --global JetBrains.dotCover.CommandLineTools --version 2023.3.0

      - name: 🏗️ Build and Analyze
        run: |
          ~/.sonar/scanner/dotnet-sonarscanner begin /k:"FusionLMS_fusion-test-repo" /o:"fusionlms" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"  /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html
          dotnet build ./FusionPlayground/FusionPlayground.sln
          dotnet-dotCover cover-dotnet "./dotCover.xml" --AttributeFilters="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" --Filters="-:*.Tests" --Output=dotCover.Output.html --ReportType=HTML -- test "./FusionPlayground/FusionPlayground.sln"
          ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
